'use strict';
var java_nio_Bits = function () {
    function java_nio_Bits() {
    }
    java_nio_Bits['copyFromShortArray(Ljava/lang/Object;JJJ)V'] = function (thread, arg0, arg1, arg2, arg3) {
        thread.throwNewException('Ljava/lang/UnsatisfiedLinkError;', 'Native method not implemented.');
    };
    java_nio_Bits['copyToShortArray(JLjava/lang/Object;JJ)V'] = function (thread, arg0, arg1, arg2, arg3) {
        thread.throwNewException('Ljava/lang/UnsatisfiedLinkError;', 'Native method not implemented.');
    };
    java_nio_Bits['copyFromIntArray(Ljava/lang/Object;JJJ)V'] = function (thread, arg0, arg1, arg2, arg3) {
        thread.throwNewException('Ljava/lang/UnsatisfiedLinkError;', 'Native method not implemented.');
    };
    java_nio_Bits['copyToIntArray(JLjava/lang/Object;JJ)V'] = function (thread, arg0, arg1, arg2, arg3) {
        thread.throwNewException('Ljava/lang/UnsatisfiedLinkError;', 'Native method not implemented.');
    };
    java_nio_Bits['copyFromLongArray(Ljava/lang/Object;JJJ)V'] = function (thread, arg0, arg1, arg2, arg3) {
        thread.throwNewException('Ljava/lang/UnsatisfiedLinkError;', 'Native method not implemented.');
    };
    java_nio_Bits['copyToLongArray(JLjava/lang/Object;JJ)V'] = function (thread, arg0, arg1, arg2, arg3) {
        thread.throwNewException('Ljava/lang/UnsatisfiedLinkError;', 'Native method not implemented.');
    };
    return java_nio_Bits;
}();
var java_nio_MappedByteBuffer = function () {
    function java_nio_MappedByteBuffer() {
    }
    java_nio_MappedByteBuffer['isLoaded0(JJI)Z'] = function (thread, javaThis, arg0, arg1, arg2) {
        thread.throwNewException('Ljava/lang/UnsatisfiedLinkError;', 'Native method not implemented.');
        return 0;
    };
    java_nio_MappedByteBuffer['load0(JJ)V'] = function (thread, javaThis, arg0, arg1) {
        thread.throwNewException('Ljava/lang/UnsatisfiedLinkError;', 'Native method not implemented.');
    };
    java_nio_MappedByteBuffer['force0(Ljava/io/FileDescriptor;JJ)V'] = function (thread, javaThis, arg0, arg1, arg2) {
        thread.throwNewException('Ljava/lang/UnsatisfiedLinkError;', 'Native method not implemented.');
    };
    return java_nio_MappedByteBuffer;
}();
var java_nio_charset_Charset$3 = function () {
    function java_nio_charset_Charset$3() {
    }
    java_nio_charset_Charset$3['run()Ljava/lang/Object;'] = function (thread, javaThis) {
        thread.throwNewException('Ljava/lang/UnsatisfiedLinkError;', 'Native method not implemented.');
        return null;
    };
    return java_nio_charset_Charset$3;
}();
registerNatives({
    'java/nio/Bits': java_nio_Bits,
    'java/nio/MappedByteBuffer': java_nio_MappedByteBuffer,
    'java/nio/charset/Charset$3': java_nio_charset_Charset$3
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9uYXRpdmVzL2phdmFfbmlvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFZQSxJQUFBLGFBQUEsR0FBQSxZQUFBO0FBQUEsSUFBQSxTQUFBLGFBQUEsR0FBQTtBQUFBLEtBQUE7QUFBQSxJQUVnQixhQUFBLENBQUEsNENBQUEsSUFBZCxVQUEyRCxNQUEzRCxFQUE4RSxJQUE5RSxFQUErRyxJQUEvRyxFQUEySCxJQUEzSCxFQUF1SSxJQUF2SSxFQUFpSjtBQUFBLFFBQy9JLE1BQUEsQ0FBTyxpQkFBUCxDQUF5QixrQ0FBekIsRUFBNkQsZ0NBQTdELEVBRCtJO0FBQUEsS0FBbkksQ0FGaEI7QUFBQSxJQU1nQixhQUFBLENBQUEsMENBQUEsSUFBZCxVQUF5RCxNQUF6RCxFQUE0RSxJQUE1RSxFQUF3RixJQUF4RixFQUF5SCxJQUF6SCxFQUFxSSxJQUFySSxFQUErSTtBQUFBLFFBQzdJLE1BQUEsQ0FBTyxpQkFBUCxDQUF5QixrQ0FBekIsRUFBNkQsZ0NBQTdELEVBRDZJO0FBQUEsS0FBakksQ0FOaEI7QUFBQSxJQVVnQixhQUFBLENBQUEsMENBQUEsSUFBZCxVQUF5RCxNQUF6RCxFQUE0RSxJQUE1RSxFQUE2RyxJQUE3RyxFQUF5SCxJQUF6SCxFQUFxSSxJQUFySSxFQUErSTtBQUFBLFFBQzdJLE1BQUEsQ0FBTyxpQkFBUCxDQUF5QixrQ0FBekIsRUFBNkQsZ0NBQTdELEVBRDZJO0FBQUEsS0FBakksQ0FWaEI7QUFBQSxJQWNnQixhQUFBLENBQUEsd0NBQUEsSUFBZCxVQUF1RCxNQUF2RCxFQUEwRSxJQUExRSxFQUFzRixJQUF0RixFQUF1SCxJQUF2SCxFQUFtSSxJQUFuSSxFQUE2STtBQUFBLFFBQzNJLE1BQUEsQ0FBTyxpQkFBUCxDQUF5QixrQ0FBekIsRUFBNkQsZ0NBQTdELEVBRDJJO0FBQUEsS0FBL0gsQ0FkaEI7QUFBQSxJQWtCZ0IsYUFBQSxDQUFBLDJDQUFBLElBQWQsVUFBMEQsTUFBMUQsRUFBNkUsSUFBN0UsRUFBOEcsSUFBOUcsRUFBMEgsSUFBMUgsRUFBc0ksSUFBdEksRUFBZ0o7QUFBQSxRQUM5SSxNQUFBLENBQU8saUJBQVAsQ0FBeUIsa0NBQXpCLEVBQTZELGdDQUE3RCxFQUQ4STtBQUFBLEtBQWxJLENBbEJoQjtBQUFBLElBc0JnQixhQUFBLENBQUEseUNBQUEsSUFBZCxVQUF3RCxNQUF4RCxFQUEyRSxJQUEzRSxFQUF1RixJQUF2RixFQUF3SCxJQUF4SCxFQUFvSSxJQUFwSSxFQUE4STtBQUFBLFFBQzVJLE1BQUEsQ0FBTyxpQkFBUCxDQUF5QixrQ0FBekIsRUFBNkQsZ0NBQTdELEVBRDRJO0FBQUEsS0FBaEksQ0F0QmhCO0FBQUEsSUEwQkEsT0FBQSxhQUFBLENBMUJBO0FBQUEsQ0FBQSxFQUFBO0FBNEJBLElBQUEseUJBQUEsR0FBQSxZQUFBO0FBQUEsSUFBQSxTQUFBLHlCQUFBLEdBQUE7QUFBQSxLQUFBO0FBQUEsSUFFZ0IseUJBQUEsQ0FBQSxpQkFBQSxJQUFkLFVBQWdDLE1BQWhDLEVBQW1ELFFBQW5ELEVBQWlHLElBQWpHLEVBQTZHLElBQTdHLEVBQXlILElBQXpILEVBQXFJO0FBQUEsUUFDbkksTUFBQSxDQUFPLGlCQUFQLENBQXlCLGtDQUF6QixFQUE2RCxnQ0FBN0QsRUFEbUk7QUFBQSxRQUVuSSxPQUFPLENBQVAsQ0FGbUk7QUFBQSxLQUF2SCxDQUZoQjtBQUFBLElBT2dCLHlCQUFBLENBQUEsWUFBQSxJQUFkLFVBQTJCLE1BQTNCLEVBQThDLFFBQTlDLEVBQTRGLElBQTVGLEVBQXdHLElBQXhHLEVBQWtIO0FBQUEsUUFDaEgsTUFBQSxDQUFPLGlCQUFQLENBQXlCLGtDQUF6QixFQUE2RCxnQ0FBN0QsRUFEZ0g7QUFBQSxLQUFwRyxDQVBoQjtBQUFBLElBV2dCLHlCQUFBLENBQUEscUNBQUEsSUFBZCxVQUFvRCxNQUFwRCxFQUF1RSxRQUF2RSxFQUFxSCxJQUFySCxFQUE0SixJQUE1SixFQUF3SyxJQUF4SyxFQUFrTDtBQUFBLFFBQ2hMLE1BQUEsQ0FBTyxpQkFBUCxDQUF5QixrQ0FBekIsRUFBNkQsZ0NBQTdELEVBRGdMO0FBQUEsS0FBcEssQ0FYaEI7QUFBQSxJQWVBLE9BQUEseUJBQUEsQ0FmQTtBQUFBLENBQUEsRUFBQTtBQWlCQSxJQUFBLDBCQUFBLEdBQUEsWUFBQTtBQUFBLElBQUEsU0FBQSwwQkFBQSxHQUFBO0FBQUEsS0FBQTtBQUFBLElBRWdCLDBCQUFBLENBQUEseUJBQUEsSUFBZCxVQUF3QyxNQUF4QyxFQUEyRCxRQUEzRCxFQUF3RztBQUFBLFFBQ3RHLE1BQUEsQ0FBTyxpQkFBUCxDQUF5QixrQ0FBekIsRUFBNkQsZ0NBQTdELEVBRHNHO0FBQUEsUUFFdEcsT0FBTyxJQUFQLENBRnNHO0FBQUEsS0FBMUYsQ0FGaEI7QUFBQSxJQU9BLE9BQUEsMEJBQUEsQ0FQQTtBQUFBLENBQUEsRUFBQTtBQVVBLGVBQUEsQ0FBZ0I7QUFBQSxJQUNkLGlCQUFpQixhQURIO0FBQUEsSUFFZCw2QkFBNkIseUJBRmY7QUFBQSxJQUdkLDhCQUE4QiwwQkFIaEI7QUFBQSxDQUFoQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKVk1UeXBlcyA9IHJlcXVpcmUoJy4uLy4uL2luY2x1ZGVzL0pWTVR5cGVzJyk7XG5pbXBvcnQgKiBhcyBEb3BwaW8gZnJvbSAnLi4vZG9wcGlvanZtJztcbmltcG9ydCBKVk1UaHJlYWQgPSBEb3BwaW8uVk0uVGhyZWFkaW5nLkpWTVRocmVhZDtcbmltcG9ydCBSZWZlcmVuY2VDbGFzc0RhdGEgPSBEb3BwaW8uVk0uQ2xhc3NGaWxlLlJlZmVyZW5jZUNsYXNzRGF0YTtcbmltcG9ydCBsb2dnaW5nID0gRG9wcGlvLkRlYnVnLkxvZ2dpbmc7XG5pbXBvcnQgdXRpbCA9IERvcHBpby5WTS5VdGlsO1xuaW1wb3J0IExvbmcgPSBEb3BwaW8uVk0uTG9uZztcbmltcG9ydCBDbGFzc0RhdGEgPSBEb3BwaW8uVk0uQ2xhc3NGaWxlLkNsYXNzRGF0YTtcbmltcG9ydCBUaHJlYWRTdGF0dXMgPSBEb3BwaW8uVk0uRW51bXMuVGhyZWFkU3RhdHVzO1xuXG5kZWNsYXJlIHZhciByZWdpc3Rlck5hdGl2ZXM6IChuYXRpdmVzOiBhbnkpID0+IHZvaWQ7XG5cbmNsYXNzIGphdmFfbmlvX0JpdHMge1xuXG4gIHB1YmxpYyBzdGF0aWMgJ2NvcHlGcm9tU2hvcnRBcnJheShMamF2YS9sYW5nL09iamVjdDtKSkopVicodGhyZWFkOiBKVk1UaHJlYWQsIGFyZzA6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIGFyZzE6IExvbmcsIGFyZzI6IExvbmcsIGFyZzM6IExvbmcpOiB2b2lkIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnY29weVRvU2hvcnRBcnJheShKTGphdmEvbGFuZy9PYmplY3Q7SkopVicodGhyZWFkOiBKVk1UaHJlYWQsIGFyZzA6IExvbmcsIGFyZzE6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIGFyZzI6IExvbmcsIGFyZzM6IExvbmcpOiB2b2lkIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnY29weUZyb21JbnRBcnJheShMamF2YS9sYW5nL09iamVjdDtKSkopVicodGhyZWFkOiBKVk1UaHJlYWQsIGFyZzA6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIGFyZzE6IExvbmcsIGFyZzI6IExvbmcsIGFyZzM6IExvbmcpOiB2b2lkIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnY29weVRvSW50QXJyYXkoSkxqYXZhL2xhbmcvT2JqZWN0O0pKKVYnKHRocmVhZDogSlZNVGhyZWFkLCBhcmcwOiBMb25nLCBhcmcxOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0LCBhcmcyOiBMb25nLCBhcmczOiBMb25nKTogdm9pZCB7XG4gICAgdGhyZWFkLnRocm93TmV3RXhjZXB0aW9uKCdMamF2YS9sYW5nL1Vuc2F0aXNmaWVkTGlua0Vycm9yOycsICdOYXRpdmUgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2NvcHlGcm9tTG9uZ0FycmF5KExqYXZhL2xhbmcvT2JqZWN0O0pKSilWJyh0aHJlYWQ6IEpWTVRocmVhZCwgYXJnMDogSlZNVHlwZXMuamF2YV9sYW5nX09iamVjdCwgYXJnMTogTG9uZywgYXJnMjogTG9uZywgYXJnMzogTG9uZyk6IHZvaWQge1xuICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvbGFuZy9VbnNhdGlzZmllZExpbmtFcnJvcjsnLCAnTmF0aXZlIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdjb3B5VG9Mb25nQXJyYXkoSkxqYXZhL2xhbmcvT2JqZWN0O0pKKVYnKHRocmVhZDogSlZNVGhyZWFkLCBhcmcwOiBMb25nLCBhcmcxOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0LCBhcmcyOiBMb25nLCBhcmczOiBMb25nKTogdm9pZCB7XG4gICAgdGhyZWFkLnRocm93TmV3RXhjZXB0aW9uKCdMamF2YS9sYW5nL1Vuc2F0aXNmaWVkTGlua0Vycm9yOycsICdOYXRpdmUgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgfVxuXG59XG5cbmNsYXNzIGphdmFfbmlvX01hcHBlZEJ5dGVCdWZmZXIge1xuXG4gIHB1YmxpYyBzdGF0aWMgJ2lzTG9hZGVkMChKSkkpWicodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5qYXZhX25pb19NYXBwZWRCeXRlQnVmZmVyLCBhcmcwOiBMb25nLCBhcmcxOiBMb25nLCBhcmcyOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvbGFuZy9VbnNhdGlzZmllZExpbmtFcnJvcjsnLCAnTmF0aXZlIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdsb2FkMChKSilWJyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLmphdmFfbmlvX01hcHBlZEJ5dGVCdWZmZXIsIGFyZzA6IExvbmcsIGFyZzE6IExvbmcpOiB2b2lkIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnZm9yY2UwKExqYXZhL2lvL0ZpbGVEZXNjcmlwdG9yO0pKKVYnKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuamF2YV9uaW9fTWFwcGVkQnl0ZUJ1ZmZlciwgYXJnMDogSlZNVHlwZXMuamF2YV9pb19GaWxlRGVzY3JpcHRvciwgYXJnMTogTG9uZywgYXJnMjogTG9uZyk6IHZvaWQge1xuICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvbGFuZy9VbnNhdGlzZmllZExpbmtFcnJvcjsnLCAnTmF0aXZlIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gIH1cblxufVxuXG5jbGFzcyBqYXZhX25pb19jaGFyc2V0X0NoYXJzZXQkMyB7XG5cbiAgcHVibGljIHN0YXRpYyAncnVuKClMamF2YS9sYW5nL09iamVjdDsnKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuamF2YV9uaW9fY2hhcnNldF9DaGFyc2V0JDMpOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0IHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbn1cblxuLy8gRXhwb3J0IGxpbmUuIFRoaXMgaXMgd2hhdCBEb3BwaW9KVk0gc2Vlcy5cbnJlZ2lzdGVyTmF0aXZlcyh7XG4gICdqYXZhL25pby9CaXRzJzogamF2YV9uaW9fQml0cyxcbiAgJ2phdmEvbmlvL01hcHBlZEJ5dGVCdWZmZXInOiBqYXZhX25pb19NYXBwZWRCeXRlQnVmZmVyLFxuICAnamF2YS9uaW8vY2hhcnNldC9DaGFyc2V0JDMnOiBqYXZhX25pb19jaGFyc2V0X0NoYXJzZXQkM1xufSk7XG4iXX0=