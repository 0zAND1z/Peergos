'use strict';
var Doppio = require('../doppiojvm');
var util = Doppio.VM.Util;
var ThreadStatus = Doppio.VM.Enums.ThreadStatus;
var assert = Doppio.Debug.Assert;
var sun_reflect_ConstantPool = function () {
    function sun_reflect_ConstantPool() {
    }
    sun_reflect_ConstantPool['getSize0(Ljava/lang/Object;)I'] = function (thread, javaThis, cp) {
        thread.throwNewException('Ljava/lang/UnsatisfiedLinkError;', 'Native method not implemented.');
        return 0;
    };
    sun_reflect_ConstantPool['getClassAt0(Ljava/lang/Object;I)Ljava/lang/Class;'] = function (thread, javaThis, cp, arg1) {
        thread.throwNewException('Ljava/lang/UnsatisfiedLinkError;', 'Native method not implemented.');
        return null;
    };
    sun_reflect_ConstantPool['getClassAtIfLoaded0(Ljava/lang/Object;I)Ljava/lang/Class;'] = function (thread, javaThis, cp, arg1) {
        thread.throwNewException('Ljava/lang/UnsatisfiedLinkError;', 'Native method not implemented.');
        return null;
    };
    sun_reflect_ConstantPool['getMethodAt0(Ljava/lang/Object;I)Ljava/lang/reflect/Member;'] = function (thread, javaThis, cp, arg1) {
        thread.throwNewException('Ljava/lang/UnsatisfiedLinkError;', 'Native method not implemented.');
        return null;
    };
    sun_reflect_ConstantPool['getMethodAtIfLoaded0(Ljava/lang/Object;I)Ljava/lang/reflect/Member;'] = function (thread, javaThis, cp, arg1) {
        thread.throwNewException('Ljava/lang/UnsatisfiedLinkError;', 'Native method not implemented.');
        return null;
    };
    sun_reflect_ConstantPool['getFieldAt0(Ljava/lang/Object;I)Ljava/lang/reflect/Field;'] = function (thread, javaThis, cp, arg1) {
        thread.throwNewException('Ljava/lang/UnsatisfiedLinkError;', 'Native method not implemented.');
        return null;
    };
    sun_reflect_ConstantPool['getFieldAtIfLoaded0(Ljava/lang/Object;I)Ljava/lang/reflect/Field;'] = function (thread, javaThis, cp, arg1) {
        thread.throwNewException('Ljava/lang/UnsatisfiedLinkError;', 'Native method not implemented.');
        return null;
    };
    sun_reflect_ConstantPool['getMemberRefInfoAt0(Ljava/lang/Object;I)[Ljava/lang/String;'] = function (thread, javaThis, cp, arg1) {
        thread.throwNewException('Ljava/lang/UnsatisfiedLinkError;', 'Native method not implemented.');
        return null;
    };
    sun_reflect_ConstantPool['getIntAt0(Ljava/lang/Object;I)I'] = function (thread, javaThis, cp, idx) {
        return cp.get(idx).value;
    };
    sun_reflect_ConstantPool['getLongAt0(Ljava/lang/Object;I)J'] = function (thread, javaThis, cp, idx) {
        return cp.get(idx).value;
    };
    sun_reflect_ConstantPool['getFloatAt0(Ljava/lang/Object;I)F'] = function (thread, javaThis, cp, arg1) {
        thread.throwNewException('Ljava/lang/UnsatisfiedLinkError;', 'Native method not implemented.');
        return 0;
    };
    sun_reflect_ConstantPool['getDoubleAt0(Ljava/lang/Object;I)D'] = function (thread, javaThis, cp, arg1) {
        thread.throwNewException('Ljava/lang/UnsatisfiedLinkError;', 'Native method not implemented.');
        return 0;
    };
    sun_reflect_ConstantPool['getStringAt0(Ljava/lang/Object;I)Ljava/lang/String;'] = function (thread, javaThis, cp, arg1) {
        thread.throwNewException('Ljava/lang/UnsatisfiedLinkError;', 'Native method not implemented.');
        return null;
    };
    sun_reflect_ConstantPool['getUTF8At0(Ljava/lang/Object;I)Ljava/lang/String;'] = function (thread, javaThis, cp, idx) {
        return util.initString(thread.getBsCl(), cp.get(idx).value);
    };
    return sun_reflect_ConstantPool;
}();
var sun_reflect_NativeConstructorAccessorImpl = function () {
    function sun_reflect_NativeConstructorAccessorImpl() {
    }
    sun_reflect_NativeConstructorAccessorImpl['newInstance0(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;)Ljava/lang/Object;'] = function (thread, m, params) {
        var cls = m['java/lang/reflect/Constructor/clazz'], slot = m['java/lang/reflect/Constructor/slot'];
        thread.setStatus(ThreadStatus.ASYNC_WAITING);
        cls.$cls.initialize(thread, function (cls) {
            if (cls !== null) {
                var method = cls.getMethodFromSlot(slot), obj = new (cls.getConstructor(thread))(thread), cb = function (e) {
                        if (e) {
                            thread.getBsCl().initializeClass(thread, 'Ljava/lang/reflect/InvocationTargetException;', function (cdata) {
                                if (cdata !== null) {
                                    var wrappedE = new (cdata.getConstructor(thread))(thread);
                                    wrappedE['<init>(Ljava/lang/Throwable;)V'](thread, [e], function (e) {
                                        thread.throwException(e ? e : wrappedE);
                                    });
                                }
                            });
                        } else {
                            thread.asyncReturn(obj);
                        }
                    };
                var paramTypes = m['java/lang/reflect/Constructor/parameterTypes'].array.map(function (pType) {
                    return pType.$cls.getInternalName();
                });
                assert(slot >= 0, 'Found a constructor without a slot?!');
                obj[method.signature](thread, params ? util.unboxArguments(thread, paramTypes, params.array) : null, cb);
            }
        }, true);
    };
    return sun_reflect_NativeConstructorAccessorImpl;
}();
var sun_reflect_NativeMethodAccessorImpl = function () {
    function sun_reflect_NativeMethodAccessorImpl() {
    }
    sun_reflect_NativeMethodAccessorImpl['invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;'] = function (thread, mObj, obj, params) {
        var cls = mObj['java/lang/reflect/Method/clazz'].$cls, slot = mObj['java/lang/reflect/Method/slot'], retType = mObj['java/lang/reflect/Method/returnType'], m = cls.getMethodFromSlot(slot), args = [], cb = function (e, rv) {
                if (e) {
                    thread.getBsCl().initializeClass(thread, 'Ljava/lang/reflect/InvocationTargetException;', function (cdata) {
                        if (cdata !== null) {
                            var wrappedE = new (cdata.getConstructor(thread))(thread);
                            wrappedE['<init>(Ljava/lang/Throwable;)V'](thread, [e], function (e) {
                                thread.throwException(e ? e : wrappedE);
                            });
                        }
                    });
                } else {
                    if (util.is_primitive_type(m.returnType)) {
                        if (m.returnType === 'V') {
                            thread.asyncReturn(null);
                        } else {
                            thread.asyncReturn(retType.$cls.createWrapperObject(thread, rv));
                        }
                    } else {
                        thread.asyncReturn(rv);
                    }
                }
            };
        if (params !== null) {
            args = util.unboxArguments(thread, m.parameterTypes, params.array);
        }
        thread.setStatus(ThreadStatus.ASYNC_WAITING);
        if (m.accessFlags.isStatic()) {
            cls.getConstructor(thread)[m.fullSignature](thread, args, cb);
        } else {
            obj[m.signature](thread, args, cb);
        }
    };
    return sun_reflect_NativeMethodAccessorImpl;
}();
function getCallerClass(thread, framesToSkip) {
    var caller = thread.getStackTrace(), idx = caller.length - 1 - framesToSkip, frame = caller[idx];
    while (frame.method.fullSignature.indexOf('java/lang/reflect/Method/invoke') === 0) {
        if (idx === 0) {
            return null;
        }
        frame = caller[--idx];
    }
    return frame.method.cls.getClassObject(thread);
}
var sun_reflect_Reflection = function () {
    function sun_reflect_Reflection() {
    }
    sun_reflect_Reflection['getCallerClass()Ljava/lang/Class;'] = function (thread) {
        return getCallerClass(thread, 2);
    };
    sun_reflect_Reflection['getClassAccessFlags(Ljava/lang/Class;)I'] = function (thread, classObj) {
        return classObj.$cls.accessFlags.getRawByte();
    };
    sun_reflect_Reflection['getCallerClass(I)Ljava/lang/Class;'] = getCallerClass;
    return sun_reflect_Reflection;
}();
registerNatives({
    'sun/reflect/ConstantPool': sun_reflect_ConstantPool,
    'sun/reflect/NativeConstructorAccessorImpl': sun_reflect_NativeConstructorAccessorImpl,
    'sun/reflect/NativeMethodAccessorImpl': sun_reflect_NativeMethodAccessorImpl,
    'sun/reflect/Reflection': sun_reflect_Reflection
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9uYXRpdmVzL3N1bl9yZWZsZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxJQUFZLE1BQUEsR0FBTSxPQUFBLENBQU0sY0FBTixDQUFsQjtBQUlBLElBQU8sSUFBQSxHQUFPLE1BQUEsQ0FBTyxFQUFQLENBQVUsSUFBeEI7QUFJQSxJQUFPLFlBQUEsR0FBZSxNQUFBLENBQU8sRUFBUCxDQUFVLEtBQVYsQ0FBZ0IsWUFBdEM7QUFDQSxJQUFPLE1BQUEsR0FBUyxNQUFBLENBQU8sS0FBUCxDQUFhLE1BQTdCO0FBS0EsSUFBQSx3QkFBQSxHQUFBLFlBQUE7QUFBQSxJQUFBLFNBQUEsd0JBQUEsR0FBQTtBQUFBLEtBQUE7QUFBQSxJQUVnQix3QkFBQSxDQUFBLCtCQUFBLElBQWQsVUFBOEMsTUFBOUMsRUFBaUUsUUFBakUsRUFBOEcsRUFBOUcsRUFBMkk7QUFBQSxRQUN6SSxNQUFBLENBQU8saUJBQVAsQ0FBeUIsa0NBQXpCLEVBQTZELGdDQUE3RCxFQUR5STtBQUFBLFFBR3pJLE9BQU8sQ0FBUCxDQUh5STtBQUFBLEtBQTdILENBRmhCO0FBQUEsSUFRZ0Isd0JBQUEsQ0FBQSxtREFBQSxJQUFkLFVBQWtFLE1BQWxFLEVBQXFGLFFBQXJGLEVBQWtJLEVBQWxJLEVBQWlLLElBQWpLLEVBQTZLO0FBQUEsUUFDM0ssTUFBQSxDQUFPLGlCQUFQLENBQXlCLGtDQUF6QixFQUE2RCxnQ0FBN0QsRUFEMks7QUFBQSxRQUczSyxPQUFPLElBQVAsQ0FIMks7QUFBQSxLQUEvSixDQVJoQjtBQUFBLElBY2dCLHdCQUFBLENBQUEsMkRBQUEsSUFBZCxVQUEwRSxNQUExRSxFQUE2RixRQUE3RixFQUEwSSxFQUExSSxFQUF5SyxJQUF6SyxFQUFxTDtBQUFBLFFBQ25MLE1BQUEsQ0FBTyxpQkFBUCxDQUF5QixrQ0FBekIsRUFBNkQsZ0NBQTdELEVBRG1MO0FBQUEsUUFHbkwsT0FBTyxJQUFQLENBSG1MO0FBQUEsS0FBdkssQ0FkaEI7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LGNBQTlHLENBUmhCO0FBQUEsSUFjQSxPQUFBLHNCQUFBLENBZEE7QUFBQSxDQUFBLEVBQUE7QUFnQkEsZUFBQSxDQUFnQjtBQUFBLElBQ2QsNEJBQTRCLHdCQURkO0FBQUEsSUFFZCw2Q0FBNkMseUNBRi9CO0FBQUEsSUFHZCx3Q0FBd0Msb0NBSDFCO0FBQUEsSUFJZCwwQkFBMEIsc0JBSlo7QUFBQSxDQUFoQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKVk1UeXBlcyA9IHJlcXVpcmUoJy4uLy4uL2luY2x1ZGVzL0pWTVR5cGVzJyk7XG5pbXBvcnQgKiBhcyBEb3BwaW8gZnJvbSAnLi4vZG9wcGlvanZtJztcbmltcG9ydCBKVk1UaHJlYWQgPSBEb3BwaW8uVk0uVGhyZWFkaW5nLkpWTVRocmVhZDtcbmltcG9ydCBSZWZlcmVuY2VDbGFzc0RhdGEgPSBEb3BwaW8uVk0uQ2xhc3NGaWxlLlJlZmVyZW5jZUNsYXNzRGF0YTtcbmltcG9ydCBsb2dnaW5nID0gRG9wcGlvLkRlYnVnLkxvZ2dpbmc7XG5pbXBvcnQgdXRpbCA9IERvcHBpby5WTS5VdGlsO1xuaW1wb3J0IENvbnN0YW50UG9vbCA9IERvcHBpby5WTS5DbGFzc0ZpbGUuQ29uc3RhbnRQb29sO1xuaW1wb3J0IExvbmcgPSBEb3BwaW8uVk0uTG9uZztcbmltcG9ydCBNZXRob2QgPSBEb3BwaW8uVk0uQ2xhc3NGaWxlLk1ldGhvZDtcbmltcG9ydCBUaHJlYWRTdGF0dXMgPSBEb3BwaW8uVk0uRW51bXMuVGhyZWFkU3RhdHVzO1xuaW1wb3J0IGFzc2VydCA9IERvcHBpby5EZWJ1Zy5Bc3NlcnQ7XG5pbXBvcnQgUHJpbWl0aXZlQ2xhc3NEYXRhID0gRG9wcGlvLlZNLkNsYXNzRmlsZS5QcmltaXRpdmVDbGFzc0RhdGE7XG5pbXBvcnQgSVN0YWNrVHJhY2VGcmFtZSA9IERvcHBpby5WTS5UaHJlYWRpbmcuSVN0YWNrVHJhY2VGcmFtZTtcbmRlY2xhcmUgdmFyIHJlZ2lzdGVyTmF0aXZlczogKGRlZnM6IGFueSkgPT4gdm9pZDtcblxuY2xhc3Mgc3VuX3JlZmxlY3RfQ29uc3RhbnRQb29sIHtcblxuICBwdWJsaWMgc3RhdGljICdnZXRTaXplMChMamF2YS9sYW5nL09iamVjdDspSScodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fcmVmbGVjdF9Db25zdGFudFBvb2wsIGNwOiBDb25zdGFudFBvb2wuQ29uc3RhbnRQb29sKTogbnVtYmVyIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICAgIC8vIFNhdGlzZnkgVHlwZVNjcmlwdCByZXR1cm4gdHlwZS5cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldENsYXNzQXQwKExqYXZhL2xhbmcvT2JqZWN0O0kpTGphdmEvbGFuZy9DbGFzczsnKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX3JlZmxlY3RfQ29uc3RhbnRQb29sLCBjcDogQ29uc3RhbnRQb29sLkNvbnN0YW50UG9vbCwgYXJnMTogbnVtYmVyKTogSlZNVHlwZXMuamF2YV9sYW5nX0NsYXNzIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICAgIC8vIFNhdGlzZnkgVHlwZVNjcmlwdCByZXR1cm4gdHlwZS5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldENsYXNzQXRJZkxvYWRlZDAoTGphdmEvbGFuZy9PYmplY3Q7SSlMamF2YS9sYW5nL0NsYXNzOycodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fcmVmbGVjdF9Db25zdGFudFBvb2wsIGNwOiBDb25zdGFudFBvb2wuQ29uc3RhbnRQb29sLCBhcmcxOiBudW1iZXIpOiBKVk1UeXBlcy5qYXZhX2xhbmdfQ2xhc3Mge1xuICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvbGFuZy9VbnNhdGlzZmllZExpbmtFcnJvcjsnLCAnTmF0aXZlIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gICAgLy8gU2F0aXNmeSBUeXBlU2NyaXB0IHJldHVybiB0eXBlLlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnZ2V0TWV0aG9kQXQwKExqYXZhL2xhbmcvT2JqZWN0O0kpTGphdmEvbGFuZy9yZWZsZWN0L01lbWJlcjsnKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX3JlZmxlY3RfQ29uc3RhbnRQb29sLCBjcDogQ29uc3RhbnRQb29sLkNvbnN0YW50UG9vbCwgYXJnMTogbnVtYmVyKTogSlZNVHlwZXMuamF2YV9sYW5nX3JlZmxlY3RfTWVtYmVyIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICAgIC8vIFNhdGlzZnkgVHlwZVNjcmlwdCByZXR1cm4gdHlwZS5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldE1ldGhvZEF0SWZMb2FkZWQwKExqYXZhL2xhbmcvT2JqZWN0O0kpTGphdmEvbGFuZy9yZWZsZWN0L01lbWJlcjsnKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX3JlZmxlY3RfQ29uc3RhbnRQb29sLCBjcDogQ29uc3RhbnRQb29sLkNvbnN0YW50UG9vbCwgYXJnMTogbnVtYmVyKTogSlZNVHlwZXMuamF2YV9sYW5nX3JlZmxlY3RfTWVtYmVyIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICAgIC8vIFNhdGlzZnkgVHlwZVNjcmlwdCByZXR1cm4gdHlwZS5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldEZpZWxkQXQwKExqYXZhL2xhbmcvT2JqZWN0O0kpTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOycodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fcmVmbGVjdF9Db25zdGFudFBvb2wsIGNwOiBDb25zdGFudFBvb2wuQ29uc3RhbnRQb29sLCBhcmcxOiBudW1iZXIpOiBKVk1UeXBlcy5qYXZhX2xhbmdfcmVmbGVjdF9GaWVsZCB7XG4gICAgdGhyZWFkLnRocm93TmV3RXhjZXB0aW9uKCdMamF2YS9sYW5nL1Vuc2F0aXNmaWVkTGlua0Vycm9yOycsICdOYXRpdmUgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgICAvLyBTYXRpc2Z5IFR5cGVTY3JpcHQgcmV0dXJuIHR5cGUuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdnZXRGaWVsZEF0SWZMb2FkZWQwKExqYXZhL2xhbmcvT2JqZWN0O0kpTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOycodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fcmVmbGVjdF9Db25zdGFudFBvb2wsIGNwOiBDb25zdGFudFBvb2wuQ29uc3RhbnRQb29sLCBhcmcxOiBudW1iZXIpOiBKVk1UeXBlcy5qYXZhX2xhbmdfcmVmbGVjdF9GaWVsZCB7XG4gICAgdGhyZWFkLnRocm93TmV3RXhjZXB0aW9uKCdMamF2YS9sYW5nL1Vuc2F0aXNmaWVkTGlua0Vycm9yOycsICdOYXRpdmUgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgICAvLyBTYXRpc2Z5IFR5cGVTY3JpcHQgcmV0dXJuIHR5cGUuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdnZXRNZW1iZXJSZWZJbmZvQXQwKExqYXZhL2xhbmcvT2JqZWN0O0kpW0xqYXZhL2xhbmcvU3RyaW5nOycodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fcmVmbGVjdF9Db25zdGFudFBvb2wsIGNwOiBDb25zdGFudFBvb2wuQ29uc3RhbnRQb29sLCBhcmcxOiBudW1iZXIpOiBKVk1UeXBlcy5KVk1BcnJheTxKVk1UeXBlcy5qYXZhX2xhbmdfU3RyaW5nPiB7XG4gICAgdGhyZWFkLnRocm93TmV3RXhjZXB0aW9uKCdMamF2YS9sYW5nL1Vuc2F0aXNmaWVkTGlua0Vycm9yOycsICdOYXRpdmUgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgICAvLyBTYXRpc2Z5IFR5cGVTY3JpcHQgcmV0dXJuIHR5cGUuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdnZXRJbnRBdDAoTGphdmEvbGFuZy9PYmplY3Q7SSlJJyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9yZWZsZWN0X0NvbnN0YW50UG9vbCwgY3A6IENvbnN0YW50UG9vbC5Db25zdGFudFBvb2wsIGlkeDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gKDxDb25zdGFudFBvb2wuQ29uc3RJbnQzMj4gY3AuZ2V0KGlkeCkpLnZhbHVlO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnZ2V0TG9uZ0F0MChMamF2YS9sYW5nL09iamVjdDtJKUonKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX3JlZmxlY3RfQ29uc3RhbnRQb29sLCBjcDogQ29uc3RhbnRQb29sLkNvbnN0YW50UG9vbCwgaWR4OiBudW1iZXIpOiBMb25nIHtcbiAgICByZXR1cm4gKDxDb25zdGFudFBvb2wuQ29uc3RMb25nPiBjcC5nZXQoaWR4KSkudmFsdWU7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdnZXRGbG9hdEF0MChMamF2YS9sYW5nL09iamVjdDtJKUYnKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX3JlZmxlY3RfQ29uc3RhbnRQb29sLCBjcDogQ29uc3RhbnRQb29sLkNvbnN0YW50UG9vbCwgYXJnMTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICAgIC8vIFNhdGlzZnkgVHlwZVNjcmlwdCByZXR1cm4gdHlwZS5cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldERvdWJsZUF0MChMamF2YS9sYW5nL09iamVjdDtJKUQnKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX3JlZmxlY3RfQ29uc3RhbnRQb29sLCBjcDogQ29uc3RhbnRQb29sLkNvbnN0YW50UG9vbCwgYXJnMTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICAgIC8vIFNhdGlzZnkgVHlwZVNjcmlwdCByZXR1cm4gdHlwZS5cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldFN0cmluZ0F0MChMamF2YS9sYW5nL09iamVjdDtJKUxqYXZhL2xhbmcvU3RyaW5nOycodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fcmVmbGVjdF9Db25zdGFudFBvb2wsIGNwOiBDb25zdGFudFBvb2wuQ29uc3RhbnRQb29sLCBhcmcxOiBudW1iZXIpOiBKVk1UeXBlcy5qYXZhX2xhbmdfU3RyaW5nIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICAgIC8vIFNhdGlzZnkgVHlwZVNjcmlwdCByZXR1cm4gdHlwZS5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldFVURjhBdDAoTGphdmEvbGFuZy9PYmplY3Q7SSlMamF2YS9sYW5nL1N0cmluZzsnKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX3JlZmxlY3RfQ29uc3RhbnRQb29sLCBjcDogQ29uc3RhbnRQb29sLkNvbnN0YW50UG9vbCwgaWR4OiBudW1iZXIpOiBKVk1UeXBlcy5qYXZhX2xhbmdfU3RyaW5nIHtcbiAgICByZXR1cm4gdXRpbC5pbml0U3RyaW5nKHRocmVhZC5nZXRCc0NsKCksICg8Q29uc3RhbnRQb29sLkNvbnN0VVRGOD4gY3AuZ2V0KGlkeCkpLnZhbHVlKTtcbiAgfVxuXG59XG5cbmNsYXNzIHN1bl9yZWZsZWN0X05hdGl2ZUNvbnN0cnVjdG9yQWNjZXNzb3JJbXBsIHtcblxuICBwdWJsaWMgc3RhdGljICduZXdJbnN0YW5jZTAoTGphdmEvbGFuZy9yZWZsZWN0L0NvbnN0cnVjdG9yO1tMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7Jyh0aHJlYWQ6IEpWTVRocmVhZCwgbTogSlZNVHlwZXMuamF2YV9sYW5nX3JlZmxlY3RfQ29uc3RydWN0b3IsIHBhcmFtczogSlZNVHlwZXMuSlZNQXJyYXk8SlZNVHlwZXMuamF2YV9sYW5nX09iamVjdD4pOiB2b2lkIHtcbiAgICB2YXIgY2xzID0gbVsnamF2YS9sYW5nL3JlZmxlY3QvQ29uc3RydWN0b3IvY2xhenonXSxcbiAgICAgIHNsb3QgPSBtWydqYXZhL2xhbmcvcmVmbGVjdC9Db25zdHJ1Y3Rvci9zbG90J107XG4gICAgdGhyZWFkLnNldFN0YXR1cyhUaHJlYWRTdGF0dXMuQVNZTkNfV0FJVElORyk7XG4gICAgY2xzLiRjbHMuaW5pdGlhbGl6ZSh0aHJlYWQsIChjbHM6IFJlZmVyZW5jZUNsYXNzRGF0YTxKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0PikgPT4ge1xuICAgICAgaWYgKGNscyAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgbWV0aG9kOiBNZXRob2QgPSBjbHMuZ2V0TWV0aG9kRnJvbVNsb3Qoc2xvdCksXG4gICAgICAgICAgb2JqID0gbmV3IChjbHMuZ2V0Q29uc3RydWN0b3IodGhyZWFkKSkodGhyZWFkKSxcbiAgICAgICAgICBjYiA9IChlPzogSlZNVHlwZXMuamF2YV9sYW5nX1Rocm93YWJsZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICAgICAgLy8gV3JhcCBpbiBhIGphdmEubGFuZy5yZWZsZWN0Lkludm9jYXRpb25UYXJnZXRFeGNlcHRpb25cbiAgICAgICAgICAgICAgdGhyZWFkLmdldEJzQ2woKS5pbml0aWFsaXplQ2xhc3ModGhyZWFkLCAnTGphdmEvbGFuZy9yZWZsZWN0L0ludm9jYXRpb25UYXJnZXRFeGNlcHRpb247JywgKGNkYXRhOiBSZWZlcmVuY2VDbGFzc0RhdGE8SlZNVHlwZXMuamF2YV9sYW5nX3JlZmxlY3RfSW52b2NhdGlvblRhcmdldEV4Y2VwdGlvbj4pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY2RhdGEgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB3cmFwcGVkRSA9IG5ldyAoY2RhdGEuZ2V0Q29uc3RydWN0b3IodGhyZWFkKSkodGhyZWFkKTtcbiAgICAgICAgICAgICAgICAgIHdyYXBwZWRFWyc8aW5pdD4oTGphdmEvbGFuZy9UaHJvd2FibGU7KVYnXSh0aHJlYWQsIFtlXSwgKGU/OiBKVk1UeXBlcy5qYXZhX2xhbmdfVGhyb3dhYmxlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRocmVhZC50aHJvd0V4Y2VwdGlvbihlID8gZSA6IHdyYXBwZWRFKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBydiBpcyBub3QgZGVmaW5lZCwgc2luY2UgY29uc3RydWN0b3JzIGRvIG5vdCByZXR1cm4gYSB2YWx1ZS5cbiAgICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBvYmplY3Qgd2UgcGFzc2VkIHRvIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICAgICAgICAgICAgdGhyZWFkLmFzeW5jUmV0dXJuKG9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcblxuICAgICAgICB2YXIgcGFyYW1UeXBlcyA9IG1bJ2phdmEvbGFuZy9yZWZsZWN0L0NvbnN0cnVjdG9yL3BhcmFtZXRlclR5cGVzJ10uYXJyYXkubWFwKChwVHlwZSkgPT4gcFR5cGUuJGNscy5nZXRJbnRlcm5hbE5hbWUoKSk7XG4gICAgICAgIGFzc2VydChzbG90ID49IDAsIFwiRm91bmQgYSBjb25zdHJ1Y3RvciB3aXRob3V0IGEgc2xvdD8hXCIpO1xuICAgICAgICAoPEpWTVR5cGVzLkpWTUZ1bmN0aW9uPiAoPGFueT4gb2JqKVttZXRob2Quc2lnbmF0dXJlXSkodGhyZWFkLCBwYXJhbXMgPyB1dGlsLnVuYm94QXJndW1lbnRzKHRocmVhZCwgcGFyYW1UeXBlcywgcGFyYW1zLmFycmF5KSA6IG51bGwsIGNiKTtcbiAgICAgIH1cbiAgICB9LCB0cnVlKTtcbiAgfVxuXG59XG5cbmNsYXNzIHN1bl9yZWZsZWN0X05hdGl2ZU1ldGhvZEFjY2Vzc29ySW1wbCB7XG5cbiAgLyoqXG4gICAqIEludm9rZSB0aGUgc3BlY2lmaWVkIG1ldGhvZCBvbiB0aGUgZ2l2ZW4gb2JqZWN0IHdpdGggdGhlIGdpdmVuIHBhcmFtZXRlcnMuXG4gICAqIElmIHRoZSBtZXRob2QgaXMgYW4gaW50ZXJmYWNlIG1ldGhvZCwgcGVyZm9ybSBhIHZpcnR1YWwgbWV0aG9kIGRpc3BhdGNoLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyAnaW52b2tlMChMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kO0xqYXZhL2xhbmcvT2JqZWN0O1tMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7Jyh0aHJlYWQ6IEpWTVRocmVhZCwgbU9iajogSlZNVHlwZXMuamF2YV9sYW5nX3JlZmxlY3RfTWV0aG9kLCBvYmo6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIHBhcmFtczogSlZNVHlwZXMuSlZNQXJyYXk8SlZNVHlwZXMuamF2YV9sYW5nX09iamVjdD4pOiB2b2lkIHtcbiAgICB2YXIgY2xzID0gPFJlZmVyZW5jZUNsYXNzRGF0YTxKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0Pj4gbU9ialsnamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kL2NsYXp6J10uJGNscyxcbiAgICAgIHNsb3Q6IG51bWJlciA9IG1PYmpbJ2phdmEvbGFuZy9yZWZsZWN0L01ldGhvZC9zbG90J10sXG4gICAgICByZXRUeXBlID0gbU9ialsnamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kL3JldHVyblR5cGUnXSxcbiAgICAgIG06IE1ldGhvZCA9IGNscy5nZXRNZXRob2RGcm9tU2xvdChzbG90KSxcbiAgICAgIGFyZ3M6IGFueVtdID0gW10sXG4gICAgICBjYiA9IChlPzogSlZNVHlwZXMuamF2YV9sYW5nX1Rocm93YWJsZSwgcnY/OiBhbnkpID0+IHtcbiAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICAvLyBXcmFwIGluIGEgamF2YS5sYW5nLnJlZmxlY3QuSW52b2NhdGlvblRhcmdldEV4Y2VwdGlvblxuICAgICAgICAgIHRocmVhZC5nZXRCc0NsKCkuaW5pdGlhbGl6ZUNsYXNzKHRocmVhZCwgJ0xqYXZhL2xhbmcvcmVmbGVjdC9JbnZvY2F0aW9uVGFyZ2V0RXhjZXB0aW9uOycsIChjZGF0YTogUmVmZXJlbmNlQ2xhc3NEYXRhPEpWTVR5cGVzLmphdmFfbGFuZ19yZWZsZWN0X0ludm9jYXRpb25UYXJnZXRFeGNlcHRpb24+KSA9PiB7XG4gICAgICAgICAgICBpZiAoY2RhdGEgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgdmFyIHdyYXBwZWRFID0gbmV3IChjZGF0YS5nZXRDb25zdHJ1Y3Rvcih0aHJlYWQpKSh0aHJlYWQpO1xuICAgICAgICAgICAgICB3cmFwcGVkRVsnPGluaXQ+KExqYXZhL2xhbmcvVGhyb3dhYmxlOylWJ10odGhyZWFkLCBbZV0sIChlPzogSlZNVHlwZXMuamF2YV9sYW5nX1Rocm93YWJsZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRocmVhZC50aHJvd0V4Y2VwdGlvbihlID8gZSA6IHdyYXBwZWRFKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHV0aWwuaXNfcHJpbWl0aXZlX3R5cGUobS5yZXR1cm5UeXBlKSkge1xuICAgICAgICAgICAgaWYgKG0ucmV0dXJuVHlwZSA9PT0gJ1YnKSB7XG4gICAgICAgICAgICAgIC8vIGFwcGFyZW50bHkgdGhlIEpWTSByZXR1cm5zIE5VTEwgd2hlbiB0aGVyZSdzIGEgdm9pZCByZXR1cm4gdmFsdWUsXG4gICAgICAgICAgICAgIC8vIHJhdGhlciB0aGFuIGF1dG9ib3hpbmcgYSBWb2lkIG9iamVjdC4gR28gZmlndXJlIVxuICAgICAgICAgICAgICB0aHJlYWQuYXN5bmNSZXR1cm4obnVsbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyB3cmFwIHVwIHByaW1pdGl2ZXMgaW4gdGhlaXIgT2JqZWN0IGJveFxuICAgICAgICAgICAgICB0aHJlYWQuYXN5bmNSZXR1cm4oKDxQcmltaXRpdmVDbGFzc0RhdGE+IHJldFR5cGUuJGNscykuY3JlYXRlV3JhcHBlck9iamVjdCh0aHJlYWQsIHJ2KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocmVhZC5hc3luY1JldHVybihydik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgaWYgKHBhcmFtcyAhPT0gbnVsbCkge1xuICAgICAgYXJncyA9IHV0aWwudW5ib3hBcmd1bWVudHModGhyZWFkLCBtLnBhcmFtZXRlclR5cGVzLCBwYXJhbXMuYXJyYXkpXG4gICAgfVxuXG4gICAgdGhyZWFkLnNldFN0YXR1cyhUaHJlYWRTdGF0dXMuQVNZTkNfV0FJVElORyk7XG4gICAgaWYgKG0uYWNjZXNzRmxhZ3MuaXNTdGF0aWMoKSkge1xuICAgICAgKDxKVk1UeXBlcy5KVk1GdW5jdGlvbj4gKDxhbnk+IGNscy5nZXRDb25zdHJ1Y3Rvcih0aHJlYWQpKVttLmZ1bGxTaWduYXR1cmVdKSh0aHJlYWQsIGFyZ3MsIGNiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgKDxKVk1UeXBlcy5KVk1GdW5jdGlvbj4gKDxhbnk+IG9iailbbS5zaWduYXR1cmVdKSh0aHJlYWQsIGFyZ3MsIGNiKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBGcm9tIEpESyBkb2N1bWVudGF0aW9uOlxuICogICBSZXR1cm5zIHRoZSBjbGFzcyBvZiB0aGUgbWV0aG9kIHJlYWxGcmFtZXNUb1NraXAgZnJhbWVzIHVwIHRoZSBzdGFja1xuICogICAoemVyby1iYXNlZCksIGlnbm9yaW5nIGZyYW1lcyBhc3NvY2lhdGVkIHdpdGhcbiAqICAgamF2YS5sYW5nLnJlZmxlY3QuTWV0aG9kLmludm9rZSgpIGFuZCBpdHMgaW1wbGVtZW50YXRpb24uIFRoZSBmaXJzdFxuICogICBmcmFtZSBpcyB0aGF0IGFzc29jaWF0ZWQgd2l0aCB0aGlzIG1ldGhvZCwgc28gZ2V0Q2FsbGVyQ2xhc3MoMCkgcmV0dXJuc1xuICogICB0aGUgQ2xhc3Mgb2JqZWN0IGZvciBzdW4ucmVmbGVjdC5SZWZsZWN0aW9uLiBGcmFtZXMgYXNzb2NpYXRlZCB3aXRoXG4gKiAgIGphdmEubGFuZy5yZWZsZWN0Lk1ldGhvZC5pbnZva2UoKSBhbmQgaXRzIGltcGxlbWVudGF0aW9uIGFyZSBjb21wbGV0ZWx5XG4gKiAgIGlnbm9yZWQgYW5kIGRvIG5vdCBjb3VudCB0b3dhcmQgdGhlIG51bWJlciBvZiBcInJlYWxcIiBmcmFtZXMgc2tpcHBlZC5cbiAqL1xuZnVuY3Rpb24gZ2V0Q2FsbGVyQ2xhc3ModGhyZWFkOiBKVk1UaHJlYWQsIGZyYW1lc1RvU2tpcDogbnVtYmVyKTogSlZNVHlwZXMuamF2YV9sYW5nX0NsYXNzIHtcbiAgdmFyIGNhbGxlciA9IHRocmVhZC5nZXRTdGFja1RyYWNlKCksXG4gICAgaWR4ID0gY2FsbGVyLmxlbmd0aCAtIDEgLSBmcmFtZXNUb1NraXAsXG4gICAgZnJhbWU6IElTdGFja1RyYWNlRnJhbWUgPSBjYWxsZXJbaWR4XTtcbiAgd2hpbGUgKGZyYW1lLm1ldGhvZC5mdWxsU2lnbmF0dXJlLmluZGV4T2YoJ2phdmEvbGFuZy9yZWZsZWN0L01ldGhvZC9pbnZva2UnKSA9PT0gMCkge1xuICAgIGlmIChpZHggPT09IDApIHtcbiAgICAgIC8vIE5vIG1vcmUgc3RhY2sgdG8gc2VhcmNoIVxuICAgICAgLy8gWFhYOiBXaGF0IGRvZXMgdGhlIEpESyBkbyBoZXJlLCB0aHJvdyBhbiBleGNlcHRpb24/XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZnJhbWUgPSBjYWxsZXJbLS1pZHhdO1xuICB9XG5cbiAgcmV0dXJuIGZyYW1lLm1ldGhvZC5jbHMuZ2V0Q2xhc3NPYmplY3QodGhyZWFkKTtcbn1cblxuY2xhc3Mgc3VuX3JlZmxlY3RfUmVmbGVjdGlvbiB7XG5cbiAgcHVibGljIHN0YXRpYyAnZ2V0Q2FsbGVyQ2xhc3MoKUxqYXZhL2xhbmcvQ2xhc3M7Jyh0aHJlYWQ6IEpWTVRocmVhZCk6IEpWTVR5cGVzLmphdmFfbGFuZ19DbGFzcyB7XG4gICAgLy8gMHRoIGl0ZW0gaXMgUmVmbGVjdGlvbiBjbGFzcywgMXN0IGl0ZW0gaXMgdGhlIGNsYXNzIHRoYXQgY2FsbGVkIHVzLFxuICAgIC8vIGFuZCAybmQgaXRlbSBpcyB0aGUgY2FsbGVyIG9mIG91ciBjYWxsZXIsIHdoaWNoIGlzIGNvcnJlY3QuXG4gICAgcmV0dXJuIGdldENhbGxlckNsYXNzKHRocmVhZCwgMik7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdnZXRDYWxsZXJDbGFzcyhJKUxqYXZhL2xhbmcvQ2xhc3M7JzogKHRocmVhZDogSlZNVGhyZWFkLCBmcmFtZXNUb1NraXA6IG51bWJlcikgPT4gSlZNVHlwZXMuamF2YV9sYW5nX0NsYXNzID0gZ2V0Q2FsbGVyQ2xhc3M7XG5cbiAgcHVibGljIHN0YXRpYyAnZ2V0Q2xhc3NBY2Nlc3NGbGFncyhMamF2YS9sYW5nL0NsYXNzOylJJyh0aHJlYWQ6IEpWTVRocmVhZCwgY2xhc3NPYmo6IEpWTVR5cGVzLmphdmFfbGFuZ19DbGFzcyk6IG51bWJlciB7XG4gICAgcmV0dXJuICg8UmVmZXJlbmNlQ2xhc3NEYXRhPEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3Q+PiBjbGFzc09iai4kY2xzKS5hY2Nlc3NGbGFncy5nZXRSYXdCeXRlKCk7XG4gIH1cblxufVxuXG5yZWdpc3Rlck5hdGl2ZXMoe1xuICAnc3VuL3JlZmxlY3QvQ29uc3RhbnRQb29sJzogc3VuX3JlZmxlY3RfQ29uc3RhbnRQb29sLFxuICAnc3VuL3JlZmxlY3QvTmF0aXZlQ29uc3RydWN0b3JBY2Nlc3NvckltcGwnOiBzdW5fcmVmbGVjdF9OYXRpdmVDb25zdHJ1Y3RvckFjY2Vzc29ySW1wbCxcbiAgJ3N1bi9yZWZsZWN0L05hdGl2ZU1ldGhvZEFjY2Vzc29ySW1wbCc6IHN1bl9yZWZsZWN0X05hdGl2ZU1ldGhvZEFjY2Vzc29ySW1wbCxcbiAgJ3N1bi9yZWZsZWN0L1JlZmxlY3Rpb24nOiBzdW5fcmVmbGVjdF9SZWZsZWN0aW9uXG59KTtcbiJdfQ==