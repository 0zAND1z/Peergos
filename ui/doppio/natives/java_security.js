'use strict';
var Doppio = require('../doppiojvm');
var ThreadStatus = Doppio.VM.Enums.ThreadStatus;
function doPrivileged(thread, action, ctx) {
    thread.setStatus(ThreadStatus.ASYNC_WAITING);
    action['run()Ljava/lang/Object;'](thread, null, function (e, rv) {
        if (e) {
            var eCls = e.getClass();
            var bsCl = thread.getBsCl();
            var errCls = bsCl.getInitializedClass(thread, 'Ljava/lang/Error;');
            var reCls = bsCl.getInitializedClass(thread, 'Ljava/lang/RuntimeException;');
            if (errCls !== null && eCls.isCastable(errCls) || reCls !== null && eCls.isCastable(reCls)) {
                thread.throwException(e);
            } else {
                thread.import('Ljava/security/PrivilegedActionException;', function (paeCons) {
                    var eobj = new paeCons(thread);
                    thread.setStatus(ThreadStatus.ASYNC_WAITING);
                    eobj['<init>(Ljava/lang/Exception;)V'](thread, [e], function (e) {
                        if (e) {
                            thread.throwException(e);
                        } else {
                            thread.throwException(eobj);
                        }
                    });
                }, false);
            }
        } else {
            thread.asyncReturn(rv);
        }
    });
}
var java_security_AccessController = function () {
    function java_security_AccessController() {
    }
    java_security_AccessController['getStackAccessControlContext()Ljava/security/AccessControlContext;'] = function (thread) {
        return null;
    };
    java_security_AccessController['getInheritedAccessControlContext()Ljava/security/AccessControlContext;'] = function (thread) {
        thread.throwNewException('Ljava/lang/UnsatisfiedLinkError;', 'Native method not implemented.');
        return null;
    };
    java_security_AccessController['doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;'] = doPrivileged;
    java_security_AccessController['doPrivileged(Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;'] = doPrivileged;
    java_security_AccessController['doPrivileged(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;'] = doPrivileged;
    java_security_AccessController['doPrivileged(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;'] = doPrivileged;
    return java_security_AccessController;
}();
registerNatives({ 'java/security/AccessController': java_security_AccessController });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9uYXRpdmVzL2phdmFfc2VjdXJpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLElBQVksTUFBQSxHQUFNLE9BQUEsQ0FBTSxjQUFOLENBQWxCO0FBTUEsSUFBTyxZQUFBLEdBQWUsTUFBQSxDQUFPLEVBQVAsQ0FBVSxLQUFWLENBQWdCLFlBQXRDO0FBR0EsU0FBQSxZQUFBLENBQXNCLE1BQXRCLEVBQXlDLE1BQXpDLEVBQTBGLEdBQTFGLEVBQTJJO0FBQUEsSUFDekksTUFBQSxDQUFPLFNBQVAsQ0FBaUIsWUFBQSxDQUFhLGFBQTlCLEVBRHlJO0FBQUEsSUFFekksTUFBQSxDQUFPLHlCQUFQLEVBQWtDLE1BQWxDLEVBQTBDLElBQTFDLEVBQWdELFVBQUMsQ0FBRCxFQUFtQyxFQUFuQyxFQUFpRTtBQUFBLFFBQy9HLElBQUksQ0FBSixFQUFPO0FBQUEsWUFHTCxJQUFJLElBQUEsR0FBTyxDQUFBLENBQUUsUUFBRixFQUFYLENBSEs7QUFBQSxZQUlMLElBQUksSUFBQSxHQUFPLE1BQUEsQ0FBTyxPQUFQLEVBQVgsQ0FKSztBQUFBLFlBS0wsSUFBSSxNQUFBLEdBQVMsSUFBQSxDQUFLLG1CQUFMLENBQXlCLE1BQXpCLEVBQWlDLG1CQUFqQyxDQUFiLENBTEs7QUFBQSxZQU1MLElBQUksS0FBQSxHQUFRLElBQUEsQ0FBSyxtQkFBTCxDQUF5QixNQUF6QixFQUFpQyw4QkFBakMsQ0FBWixDQU5LO0FBQUEsWUFPTCxJQUFLLE1BQUEsS0FBVyxJQUFYLElBQW1CLElBQUEsQ0FBSyxVQUFMLENBQWdCLE1BQWhCLENBQXBCLElBQWlELEtBQUEsS0FBVSxJQUFWLElBQWtCLElBQUEsQ0FBSyxVQUFMLENBQWdCLEtBQWhCLENBQXZFLEVBQWdHO0FBQUEsZ0JBQzlGLE1BQUEsQ0FBTyxjQUFQLENBQXNCLENBQXRCLEVBRDhGO0FBQUEsYUFBaEcsTUFFTztBQUFBLGdCQUVMLE1BQUEsQ0FBTyxNQUFQLENBQWMsMkNBQWQsRUFBMkQsVUFBQyxPQUFELEVBQTJFO0FBQUEsb0JBQ3BJLElBQUksSUFBQSxHQUFPLElBQUksT0FBSixDQUFZLE1BQVosQ0FBWCxDQURvSTtBQUFBLG9CQUVwSSxNQUFBLENBQU8sU0FBUCxDQUFpQixZQUFBLENBQWEsYUFBOUIsRUFGb0k7QUFBQSxvQkFHcEksSUFBQSxDQUFLLGdDQUFMLEVBQXVDLE1BQXZDLEVBQStDLENBQWdDLENBQWhDLENBQS9DLEVBQW1GLFVBQUMsQ0FBRCxFQUFpQztBQUFBLHdCQUNsSCxJQUFJLENBQUosRUFBTztBQUFBLDRCQUVMLE1BQUEsQ0FBTyxjQUFQLENBQXNCLENBQXRCLEVBRks7QUFBQSx5QkFBUCxNQUdPO0FBQUEsNEJBQ0wsTUFBQSxDQUFPLGNBQVAsQ0FBc0IsSUFBdEIsRUFESztBQUFBLHlCQUoyRztBQUFBLHFCQUFwSCxFQUhvSTtBQUFBLGlCQUF0SSxFQVdHLEtBWEgsRUFGSztBQUFBLGFBVEY7QUFBQSxTQUFQLE1Bd0JPO0FBQUEsWUFFTCxNQUFBLENBQU8sV0FBUCxDQUFtQixFQUFuQixFQUZLO0FBQUEsU0F6QndHO0FBQUEsS0FBakgsRUFGeUk7QUFBQTtBQWtDM0ksSUFBQSw4QkFBQSxHQUFBLFlBQUE7QUFBQSxJQUFBLFNBQUEsOEJBQUEsR0FBQTtBQUFBLEtBQUE7QUFBQSxJQU9nQiw4QkFBQSxDQUFBLG9FQUFBLElBQWQsVUFBbUYsTUFBbkYsRUFBb0c7QUFBQSxRQUNsRyxPQUFPLElBQVAsQ0FEa0c7QUFBQSxLQUF0RixDQVBoQjtBQUFBLElBV2dCLDhCQUFBLENBQUEsd0VBQUEsSUFBZCxVQUF1RixNQUF2RixFQUF3RztBQUFBLFFBQ3RHLE1BQUEsQ0FBTyxpQkFBUCxDQUF5QixrQ0FBekIsRUFBNkQsZ0NBQTdELEVBRHNHO0FBQUEsUUFHdEcsT0FBTyxJQUFQLENBSHNHO0FBQUEsS0FBMUYsQ0FYaEI7QUFBQSxJQUVnQiw4QkFBQSxDQUFBLGtFQUFBLElBQW1KLFlBQW5KLENBRmhCO0FBQUEsSUFHZ0IsOEJBQUEsQ0FBQSxzR0FBQSxJQUF5TyxZQUF6TyxDQUhoQjtBQUFBLElBSWdCLDhCQUFBLENBQUEsMkVBQUEsSUFBcUssWUFBckssQ0FKaEI7QUFBQSxJQUtnQiw4QkFBQSxDQUFBLCtHQUFBLElBQTJQLFlBQTNQLENBTGhCO0FBQUEsSUFpQkEsT0FBQSw4QkFBQSxDQWpCQTtBQUFBLENBQUEsRUFBQTtBQW1CQSxlQUFBLENBQWdCLEVBQ2Qsa0NBQWtDLDhCQURwQixFQUFoQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKVk1UeXBlcyA9IHJlcXVpcmUoJy4uLy4uL2luY2x1ZGVzL0pWTVR5cGVzJyk7XG5pbXBvcnQgKiBhcyBEb3BwaW8gZnJvbSAnLi4vZG9wcGlvanZtJztcbmltcG9ydCBKVk1UaHJlYWQgPSBEb3BwaW8uVk0uVGhyZWFkaW5nLkpWTVRocmVhZDtcbmltcG9ydCBSZWZlcmVuY2VDbGFzc0RhdGEgPSBEb3BwaW8uVk0uQ2xhc3NGaWxlLlJlZmVyZW5jZUNsYXNzRGF0YTtcbmltcG9ydCBJSlZNQ29uc3RydWN0b3IgPSBEb3BwaW8uVk0uQ2xhc3NGaWxlLklKVk1Db25zdHJ1Y3RvcjtcbmltcG9ydCBsb2dnaW5nID0gRG9wcGlvLkRlYnVnLkxvZ2dpbmc7XG5pbXBvcnQgdXRpbCA9IERvcHBpby5WTS5VdGlsO1xuaW1wb3J0IFRocmVhZFN0YXR1cyA9IERvcHBpby5WTS5FbnVtcy5UaHJlYWRTdGF0dXM7XG5kZWNsYXJlIHZhciByZWdpc3Rlck5hdGl2ZXM6IChkZWZzOiBhbnkpID0+IHZvaWQ7XG5cbmZ1bmN0aW9uIGRvUHJpdmlsZWdlZCh0aHJlYWQ6IEpWTVRocmVhZCwgYWN0aW9uOiBKVk1UeXBlcy5qYXZhX3NlY3VyaXR5X1ByaXZpbGVnZWRBY3Rpb24sIGN0eD86IEpWTVR5cGVzLmphdmFfc2VjdXJpdHlfQWNjZXNzQ29udHJvbENvbnRleHQpOiB2b2lkIHtcbiAgdGhyZWFkLnNldFN0YXR1cyhUaHJlYWRTdGF0dXMuQVNZTkNfV0FJVElORyk7XG4gIGFjdGlvblsncnVuKClMamF2YS9sYW5nL09iamVjdDsnXSh0aHJlYWQsIG51bGwsIChlPzogSlZNVHlwZXMuamF2YV9sYW5nX1Rocm93YWJsZSwgcnY/OiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0KTogdm9pZCA9PiB7XG4gICAgaWYgKGUpIHtcbiAgICAgIC8vIElmIGUgaXMgYW4gVU5DSEVDS0VEIGV4Y2VwdGlvbiwgcmUtdGhyb3cgaXQuXG4gICAgICAvLyBodHRwczovL2RvY3Mub3JhY2xlLmNvbS9qYXZhc2UvdHV0b3JpYWwvZXNzZW50aWFsL2V4Y2VwdGlvbnMvcnVudGltZS5odG1sXG4gICAgICBsZXQgZUNscyA9IGUuZ2V0Q2xhc3MoKTtcbiAgICAgIGxldCBic0NsID0gdGhyZWFkLmdldEJzQ2woKTtcbiAgICAgIGxldCBlcnJDbHMgPSBic0NsLmdldEluaXRpYWxpemVkQ2xhc3ModGhyZWFkLCAnTGphdmEvbGFuZy9FcnJvcjsnKTtcbiAgICAgIGxldCByZUNscyA9IGJzQ2wuZ2V0SW5pdGlhbGl6ZWRDbGFzcyh0aHJlYWQsICdMamF2YS9sYW5nL1J1bnRpbWVFeGNlcHRpb247Jyk7XG4gICAgICBpZiAoKGVyckNscyAhPT0gbnVsbCAmJiBlQ2xzLmlzQ2FzdGFibGUoZXJyQ2xzKSkgfHwgKHJlQ2xzICE9PSBudWxsICYmIGVDbHMuaXNDYXN0YWJsZShyZUNscykpKSB7XG4gICAgICAgIHRocmVhZC50aHJvd0V4Y2VwdGlvbihlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEl0IGlzIGEgY2hlY2tlZCBleGNlcHRpb24uIFdyYXAgZXhjZXB0aW9uIGluIGEgUHJpdmlsZWdlZEFjdGlvbkV4Y2VwdGlvbiwgYW5kIHRocm93IGl0LlxuICAgICAgICB0aHJlYWQuaW1wb3J0KCdMamF2YS9zZWN1cml0eS9Qcml2aWxlZ2VkQWN0aW9uRXhjZXB0aW9uOycsIChwYWVDb25zOiBJSlZNQ29uc3RydWN0b3I8SlZNVHlwZXMuamF2YV9zZWN1cml0eV9Qcml2aWxlZ2VkQWN0aW9uRXhjZXB0aW9uPikgPT4ge1xuICAgICAgICAgIHZhciBlb2JqID0gbmV3IHBhZUNvbnModGhyZWFkKTtcbiAgICAgICAgICB0aHJlYWQuc2V0U3RhdHVzKFRocmVhZFN0YXR1cy5BU1lOQ19XQUlUSU5HKTtcbiAgICAgICAgICBlb2JqWyc8aW5pdD4oTGphdmEvbGFuZy9FeGNlcHRpb247KVYnXSh0aHJlYWQsIFs8SlZNVHlwZXMuamF2YV9sYW5nX0V4Y2VwdGlvbj4gZV0sIChlPzogSlZNVHlwZXMuamF2YV9sYW5nX1Rocm93YWJsZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICAgICAgLy8gRmFpbGVkIHRvIGNvbnN0cnVjdCBhIFByaXZpbGVnZWRBY3Rpb25FeGNlcHRpb24/IERhbmcuXG4gICAgICAgICAgICAgIHRocmVhZC50aHJvd0V4Y2VwdGlvbihlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocmVhZC50aHJvd0V4Y2VwdGlvbihlb2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGb3J3YXJkIHJldHVybiB2YWx1ZS5cbiAgICAgIHRocmVhZC5hc3luY1JldHVybihydik7XG4gICAgfVxuICB9KTtcbn1cblxuY2xhc3MgamF2YV9zZWN1cml0eV9BY2Nlc3NDb250cm9sbGVyIHtcblxuICBwdWJsaWMgc3RhdGljICdkb1ByaXZpbGVnZWQoTGphdmEvc2VjdXJpdHkvUHJpdmlsZWdlZEFjdGlvbjspTGphdmEvbGFuZy9PYmplY3Q7JzogKHRocmVhZDogSlZNVGhyZWFkLCBhY3Rpb246IEpWTVR5cGVzLmphdmFfc2VjdXJpdHlfUHJpdmlsZWdlZEFjdGlvbikgPT4gdm9pZCA9IGRvUHJpdmlsZWdlZDtcbiAgcHVibGljIHN0YXRpYyAnZG9Qcml2aWxlZ2VkKExqYXZhL3NlY3VyaXR5L1ByaXZpbGVnZWRBY3Rpb247TGphdmEvc2VjdXJpdHkvQWNjZXNzQ29udHJvbENvbnRleHQ7KUxqYXZhL2xhbmcvT2JqZWN0Oyc6ICh0aHJlYWQ6IEpWTVRocmVhZCwgYWN0aW9uOiBKVk1UeXBlcy5qYXZhX3NlY3VyaXR5X1ByaXZpbGVnZWRBY3Rpb24sIGN0eDogSlZNVHlwZXMuamF2YV9zZWN1cml0eV9BY2Nlc3NDb250cm9sQ29udGV4dCkgPT4gdm9pZCA9IGRvUHJpdmlsZWdlZDtcbiAgcHVibGljIHN0YXRpYyAnZG9Qcml2aWxlZ2VkKExqYXZhL3NlY3VyaXR5L1ByaXZpbGVnZWRFeGNlcHRpb25BY3Rpb247KUxqYXZhL2xhbmcvT2JqZWN0Oyc6ICh0aHJlYWQ6IEpWTVRocmVhZCwgYWN0aW9uOiBKVk1UeXBlcy5qYXZhX3NlY3VyaXR5X1ByaXZpbGVnZWRFeGNlcHRpb25BY3Rpb24pID0+IHZvaWQgPSBkb1ByaXZpbGVnZWQ7XG4gIHB1YmxpYyBzdGF0aWMgJ2RvUHJpdmlsZWdlZChMamF2YS9zZWN1cml0eS9Qcml2aWxlZ2VkRXhjZXB0aW9uQWN0aW9uO0xqYXZhL3NlY3VyaXR5L0FjY2Vzc0NvbnRyb2xDb250ZXh0OylMamF2YS9sYW5nL09iamVjdDsnOiAodGhyZWFkOiBKVk1UaHJlYWQsIGFjdGlvbjogSlZNVHlwZXMuamF2YV9zZWN1cml0eV9Qcml2aWxlZ2VkRXhjZXB0aW9uQWN0aW9uLCBjdHg6IEpWTVR5cGVzLmphdmFfc2VjdXJpdHlfQWNjZXNzQ29udHJvbENvbnRleHQpID0+IHZvaWQgPSBkb1ByaXZpbGVnZWQ7XG5cbiAgcHVibGljIHN0YXRpYyAnZ2V0U3RhY2tBY2Nlc3NDb250cm9sQ29udGV4dCgpTGphdmEvc2VjdXJpdHkvQWNjZXNzQ29udHJvbENvbnRleHQ7Jyh0aHJlYWQ6IEpWTVRocmVhZCk6IEpWTVR5cGVzLmphdmFfc2VjdXJpdHlfQWNjZXNzQ29udHJvbENvbnRleHQge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnZ2V0SW5oZXJpdGVkQWNjZXNzQ29udHJvbENvbnRleHQoKUxqYXZhL3NlY3VyaXR5L0FjY2Vzc0NvbnRyb2xDb250ZXh0OycodGhyZWFkOiBKVk1UaHJlYWQpOiBKVk1UeXBlcy5qYXZhX3NlY3VyaXR5X0FjY2Vzc0NvbnRyb2xDb250ZXh0IHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICAgIC8vIFNhdGlzZnkgVHlwZVNjcmlwdCByZXR1cm4gdHlwZS5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG59XG5cbnJlZ2lzdGVyTmF0aXZlcyh7XG4gICdqYXZhL3NlY3VyaXR5L0FjY2Vzc0NvbnRyb2xsZXInOiBqYXZhX3NlY3VyaXR5X0FjY2Vzc0NvbnRyb2xsZXJcbn0pO1xuIl19